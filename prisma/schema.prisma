// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  name           String?
  mobile         String?  
  isActive       Boolean  @default(true)  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  loginMethod    String   @default("google")  
  username       String?  
  profileImage   String?
  messagesLeft   Int      @default(20)
  hasRecharged   Boolean   @default(false)

  accounts       Account[]
  sessions       Session[]
  feedback       Feedback[]
  deleteRequests DeleteRequest[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String  
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  
  access_token      String?  
  expires_at        Int?  
  token_type        String?  
  scope             String?  
  id_token          String?  
  session_state     String?  

  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String  
  expires      DateTime  

  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Feedback {
  id        String   @id @default(uuid())
  message   String   @db.Text
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model DeleteRequest {
  id        String   @id @default(uuid())
  userId    String
  status    String   @default("PENDING") // PENDING, APPROVED, REJECTED, COMPLETED
  reason    String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}